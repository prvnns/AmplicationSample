/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, ShapeDatum } from "@prisma/client";

export class ShapeDatumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ShapeDatumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShapeDatumFindManyArgs>
  ): Promise<number> {
    return this.prisma.shapeDatum.count(args);
  }

  async findMany<T extends Prisma.ShapeDatumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShapeDatumFindManyArgs>
  ): Promise<ShapeDatum[]> {
    return this.prisma.shapeDatum.findMany(args);
  }
  async findOne<T extends Prisma.ShapeDatumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShapeDatumFindUniqueArgs>
  ): Promise<ShapeDatum | null> {
    return this.prisma.shapeDatum.findUnique(args);
  }
  async create<T extends Prisma.ShapeDatumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShapeDatumCreateArgs>
  ): Promise<ShapeDatum> {
    return this.prisma.shapeDatum.create<T>(args);
  }
  async update<T extends Prisma.ShapeDatumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShapeDatumUpdateArgs>
  ): Promise<ShapeDatum> {
    return this.prisma.shapeDatum.update<T>(args);
  }
  async delete<T extends Prisma.ShapeDatumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShapeDatumDeleteArgs>
  ): Promise<ShapeDatum> {
    return this.prisma.shapeDatum.delete(args);
  }
}
